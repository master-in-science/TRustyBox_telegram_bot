name: "New Release"

permissions:
  contents: "write"

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  get-tag:
    name: "Get Tag From Package Version"
    runs-on: "ubuntu-latest"
    outputs:
      pkg-version: ${{ steps.pkg-version.outputs.PKG_VERSION }} 
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get tag"
        id: "pkg-version"
        shell: "bash"
        run: |
          echo PKG_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml) >> $GITHUB_OUTPUT

  create-release:
    name: "Create release"
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: "get-tag"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4.1.1
      
      - name: "Create release"
        uses: "taiki-e/create-gh-release-action@v1"
        with:
          # (optional) Path to changelog.
          # changelog: CHANGELOG.md
          # (required) GitHub token for creating GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}
          # Select the branch and tag
          branch: "main"
          ref: refs/tags/v${{ needs.get-tag.outputs.pkg-version }}

  upload-assets:
    name: "Upload assets to Github releases"
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: 
      - "get-tag"
      - "create-release"
    strategy:
      matrix:
        include:
          - target: "x86_64-unknown-linux-gnu"
            os: "ubuntu-latest"
          - target: "x86_64-unknown-linux-musl"
            os: "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4.1.1

      - name: "Upload Binaries"
        uses: "taiki-e/upload-rust-binary-action@v1"
        with:
          # (required) Comma-separated list of binary names (non-extension portion of filename) to build and upload.
          # Note that glob pattern is not supported yet.
          bin: ${{ github.event.repository.name }}
          # (optional) Target triple, default is host triple.
          target: ${{ matrix.target }}
          # (optional) Archive name (non-extension portion of filename) to be uploaded.
          # [default value: $bin-$target]
          # [possible values: the following variables and any string]
          #   variables:
          #     - $bin    - Binary name (non-extension portion of filename).
          #     - $target - Target triple.
          #     - $tag    - Tag of this release.
          # When multiple binary names are specified, default archive name or $bin variable cannot be used.
          archive: $bin-${{ matrix.target }}
          # Select the tag
          ref: refs/tags/v${{ needs.get-tag.outputs.pkg-version }}
          # (required) GitHub token for uploading assets to GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}

  push-to-registry:
    name: "Push Docker image to GHCR"
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - "get-tag"
      - "upload-assets"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4.1.1

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3.0.0

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3.0.0

      - name: "Login to GHCR"
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Extract metadata (tags, labels) for Docker"
        id: "meta"
        uses: "docker/metadata-action@v5.5.0"
        with:
          images: ghcr.io/${{ github.repository }}
      
      - name: "Build and push Docker image"
        uses: "docker/build-push-action@v5.1.0"
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64, linux/arm64/v8
          tags: ${{ github.repository }}:latest,${{ github.repository }}:v${{ needs.get-tag.outputs.pkg-version }}
          # tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
